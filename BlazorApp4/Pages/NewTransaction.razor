@page "/NewTransaction"
@inject IAccountService AccountService

<!-- Transaction page -->
<h3 class="mb-3">Transaction</h3>

@if (_accounts.Count < 2)
{
    <p>Skapa minst två konton för att göra en transaktion</p>
}
else
{
    <!-- Transaction form -->
    <EditForm Model="_model" OnValidSubmit="OnSubmitAsync">
        <DataAnnotationsValidator />
        <ValidationSummary class="text-danger mb-3" />

        <!-- Transfer from -->
        <div class="mb-3">
            <label class="form-label">Transfer from</label>
            <InputSelect TValue="Guid"
                         @bind-Value="_model.FromAccountId"
                         class="form-select"
                         @onchange="HandleFormChanged">
                <option value="@Guid.Empty">Choose Account</option>
                @foreach (var account in _accounts)
                {
                    <option value="@account.Id">@account.Name (@account.Balance @account.Currency)</option>
                }
            </InputSelect>
        </div>

        <!-- Transfer to -->
        <div class="mb-3">
            <label class="form-label">Transfer to</label>
            <InputSelect TValue="Guid"
                         @bind-Value="_model.ToAccountId"
                         class="form-select"
                         disabled="@(_model.FromAccountId == Guid.Empty)">
                <option value="@Guid.Empty">Choose Account</option>
                @foreach (var account in _toAccounts.Where(x => x.Id != _model.FromAccountId))
                {
                    <option value="@account.Id">@account.Name (@account.Balance @account.Currency)</option>
                }
            </InputSelect>
        </div>

        <!-- Amount -->
        <div class="mb-3">
            <label class="form-label">Amount</label>
            <InputNumber TValue="decimal" @bind-Value="_model.Amount" class="form-control" min="0.01" step="0.01" />
        </div>

        <!-- Submit button -->
        <div class="mb-3">
            <button type="submit" class="btn btn-primary ">Complete Transaction</button>
        </div>
    </EditForm>

    <!-- Account overwiev -->
    <div>
        <h3 class="mb-3">All accounts</h3>
        <ul class="list-group">
            @foreach (var account in _accounts)
            {
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    <div>
                        <strong>@account.Name</strong> - @account.AccountType - @account.Balance - @account.Currency
                    </div>
                </li>
            }
        </ul>
    </div>
}

<!-- Coding stuff -->
@code
{
    /// Private lists and models
    private readonly TransferFormModel _model = new();
    private List<BankAccount> _accounts = new();
    private List<BankAccount> _toAccounts = new();

    /// <summary>
    /// Represent the transfer form field
    /// </summary>
    private class TransferFormModel
    {
        public Guid FromAccountId { get; set; }
        public Guid ToAccountId { get; set; }
        public decimal Amount { get; set; }
    }

    /// <summary>
    /// Loads all account when the component initializes
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        await AccountService.EnsureLoadedAsync();
        _accounts = AccountService.GetAccounts();
        _toAccounts = _accounts;
    }

    /// <summary>
    /// Handels form submission for completing a transfer between two accounts
    /// Includes validation and refreshes the account list
    /// </summary>
    private async Task OnSubmitAsync()
    {
        if (_model.FromAccountId == Guid.Empty || _model.ToAccountId == Guid.Empty) //Checks if both account selcted are not the same
        {
            StateHasChanged();
        }
        if (_model.FromAccountId == _model.ToAccountId)
        {
            StateHasChanged();
        }
        try
        {
            await AccountService.Transfer(_model.FromAccountId, _model.ToAccountId, _model.Amount); //Perform transfer
            _accounts = AccountService.GetAccounts();   //Updating list

            //Show confirmation
            var from = _accounts.First(x => x.Id == _model.FromAccountId);
            var to = _accounts.First(x => x.Id == _model.ToAccountId);
            _model.Amount = 0;
            StateHasChanged();
        }
        catch (Exception exception)
        {
            Console.WriteLine(exception.Message);
        }
    }

    /// <summary>
    /// Parses the new value and updates available "To" account
    /// </summary>
    private void HandleFormChanged(ChangeEventArgs eventArgs)
    {
        if (Guid.TryParse(eventArgs.Value?.ToString(), out var id))
        {
            OnFormChanged(id);
        }
    }

    /// <summary>
    /// Uppdates the "To" account list based on the "From" account.
    /// Prevents selecting the same account 
    /// </summary>
    /// <param name="fromId">The selected account ID</param>
    private void OnFormChanged(Guid fromId)
    {
        _model.FromAccountId = fromId;
        var from = _accounts.FirstOrDefault(x => x.Id == fromId);
        if (from != null)
        {
            _toAccounts = _accounts.Where(account => account.Id != fromId).ToList();
        }
        else
        {
            _toAccounts = _accounts.ToList();
        }
        _model.ToAccountId = Guid.Empty;
    }
}

