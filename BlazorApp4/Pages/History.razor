@page "/TransactionHistory"
@inject IAccountService AccountService

<!-- Transaction history -->
<h3 class="mb-3">Transaction History</h3>

@if (_accounts.Count == 0)
{
    <p>Inga konton finns.</p>
}
else
{
    <!-- Account selection -->
    <div class="mb-2">
        <label>Choose Account</label>
        <InputSelect TValue="Guid"
                     class="form-select"
                     id="accountSelect"
                     @bind-Value="SelectedAccountId">
            @foreach (var account in _accounts)
            {
                <option value="@account.Id">@account.Name - Balance: @account.Balance</option>
            }
        </InputSelect>
    </div>

    <!-- Sortbutton (date/amount) -->
    <div class="mb-2">
        <button class="btn btn-sm" @onclick="() => SetSort(SortKey.Date)">
            ↓↑ Date @(currentKey == SortKey.Date ? (descending ? "↓" : "↑") : "")
        </button>
        <button class="btn btn-sm" @onclick="() => SetSort(SortKey.Amount)">
            ↓↑ Amount @(currentKey == SortKey.Amount ? (descending ? "↓" : "↑") : "")
        </button>
    </div>
}

@if (_selectedAccount == null)
{
    <p> Choose Account </p>
}
else
{
    <!-- Transaction table -->
    <table class="table table-sm">
        <thead>
            <tr>
                <th>Date</th>
                <th>Amount</th>
                <th>Transaction Type</th>
                <th>Amount after transaction</th>
                <th>from -> to</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var transaction in sortedTransaction())
            {
                <tr>
                    <td>@transaction.TimeStamp.ToString("yyyy-MM-dd HH:mm:ss")</td>
                    <td>@transaction.Amount</td>
                    <td>@transaction.transactionType</td>
                    <td>@transaction.BalanceAfterTransaction</td>
                    <td>
                        @if (transaction.FromAccountId.HasValue || transaction.ToAccountId.HasValue)
                        {
                            <span>@(transaction.FromAccountId.ToString()[..6]) -> @(transaction.ToAccountId.ToString()[..6])</span>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<!-- Code for design -->
@code {
    /// List and fields
    private List<BankAccount> _accounts = new();
    private BankAccount? _selectedAccount;
    private Guid _selectedAccountId;
    private SortKey currentKey = SortKey.Date;
    private bool descending = true;

    /// <summary>
    /// Sorting options for transaction list
    /// </summary>
    private enum SortKey
    {
        Date,
        Amount
    }

    /// <summary>
    /// Toggles sorting key and direction on user click on button
    /// </summary>
    /// <param name="sortKey">Sorting options</param>
    private void SetSort(SortKey sortKey)
    {
        if (currentKey == sortKey)
        {
            descending = !descending;
        }
        else
        {
            currentKey = sortKey;
            descending = true;
        }
    }

    /// <summary>
    /// Property for binding the selected accounts ID in the dropdown
    /// Updates the selected account and triggers UI refresh
    /// </summary>
    private Guid SelectedAccountId
    {
        get => _selectedAccountId;
        set
        {
            if (_selectedAccountId == value)
                return;
            _selectedAccountId = value;
            _selectedAccount = _accounts.FirstOrDefault(account => account.Id == value);
            StateHasChanged();
        }
    }

    /// <summary>
    /// Loads all accounts on component initialized and selects the first by default
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        await AccountService.EnsureLoadedAsync();
        _accounts = AccountService.GetAccounts();

        // If there is accounts in our lust, chose first to show in UI
        if (_accounts.Count > 0)
        {
            _selectedAccountId = _accounts[0].Id;
            _selectedAccount = _accounts[0];
        }
        StateHasChanged();
    }

    /// <summary>
    /// Returns a sorted list of trasactions for the selected account
    /// Sorting is depended on curent KeySort and order
    /// </summary>
    /// <returns>Sorted and orderd Enumerable</returns>
    private IEnumerable<Transaction> sortedTransaction()
    {
        if (_selectedAccount == null)
            return Enumerable.Empty<Transaction>();

        // Sorts enummerable on date and amount
        var sortedList = _selectedAccount.Transactions.AsEnumerable();
        sortedList = currentKey switch
        {
            SortKey.Amount => (descending
                ? sortedList.OrderByDescending(transaction => transaction.Amount)
            : sortedList.OrderBy(transaction => transaction.Amount)),
            SortKey.Date => (descending
                ? sortedList.OrderByDescending(transaction => transaction.TimeStamp)
                : sortedList.OrderBy(transaction => transaction.TimeStamp))
        };
        return sortedList;
    }
}